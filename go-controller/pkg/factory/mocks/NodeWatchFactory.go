// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	corev1 "k8s.io/api/core/v1"
	cache "k8s.io/client-go/tools/cache"

	discoveryv1 "k8s.io/api/discovery/v1"

	egressipv1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/egressip/v1/apis/informers/externalversions/egressip/v1"

	factory "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/factory"

	informerscorev1 "k8s.io/client-go/informers/core/v1"

	k8s_cni_cncf_iov1 "github.com/k8snetworkplumbingwg/network-attachment-definition-client/pkg/client/informers/externalversions/k8s.cni.cncf.io/v1"

	labels "k8s.io/apimachinery/pkg/labels"

	mock "github.com/stretchr/testify/mock"

	routeadvertisementsv1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/routeadvertisements/v1/apis/informers/externalversions/routeadvertisements/v1"

	userdefinednetworkv1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/userdefinednetwork/v1/apis/informers/externalversions/userdefinednetwork/v1"

	v1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/adminpolicybasedroute/v1/apis/informers/externalversions/adminpolicybasedroute/v1"
)

// NodeWatchFactory is an autogenerated mock type for the NodeWatchFactory type
type NodeWatchFactory struct {
	mock.Mock
}

// APBRouteInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) APBRouteInformer() v1.AdminPolicyBasedExternalRouteInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APBRouteInformer")
	}

	var r0 v1.AdminPolicyBasedExternalRouteInformer
	if rf, ok := ret.Get(0).(func() v1.AdminPolicyBasedExternalRouteInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.AdminPolicyBasedExternalRouteInformer)
		}
	}

	return r0
}

// AddFilteredEndpointSliceHandler provides a mock function with given fields: namespace, sel, handlerFuncs, processExisting
func (_m *NodeWatchFactory) AddFilteredEndpointSliceHandler(namespace string, sel labels.Selector, handlerFuncs cache.ResourceEventHandler, processExisting func([]interface{}) error) (*factory.Handler, error) {
	ret := _m.Called(namespace, sel, handlerFuncs, processExisting)

	if len(ret) == 0 {
		panic("no return value specified for AddFilteredEndpointSliceHandler")
	}

	var r0 *factory.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(string, labels.Selector, cache.ResourceEventHandler, func([]interface{}) error) (*factory.Handler, error)); ok {
		return rf(namespace, sel, handlerFuncs, processExisting)
	}
	if rf, ok := ret.Get(0).(func(string, labels.Selector, cache.ResourceEventHandler, func([]interface{}) error) *factory.Handler); ok {
		r0 = rf(namespace, sel, handlerFuncs, processExisting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*factory.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(string, labels.Selector, cache.ResourceEventHandler, func([]interface{}) error) error); ok {
		r1 = rf(namespace, sel, handlerFuncs, processExisting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFilteredServiceHandler provides a mock function with given fields: namespace, handlerFuncs, processExisting
func (_m *NodeWatchFactory) AddFilteredServiceHandler(namespace string, handlerFuncs cache.ResourceEventHandler, processExisting func([]interface{}) error) (*factory.Handler, error) {
	ret := _m.Called(namespace, handlerFuncs, processExisting)

	if len(ret) == 0 {
		panic("no return value specified for AddFilteredServiceHandler")
	}

	var r0 *factory.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(string, cache.ResourceEventHandler, func([]interface{}) error) (*factory.Handler, error)); ok {
		return rf(namespace, handlerFuncs, processExisting)
	}
	if rf, ok := ret.Get(0).(func(string, cache.ResourceEventHandler, func([]interface{}) error) *factory.Handler); ok {
		r0 = rf(namespace, handlerFuncs, processExisting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*factory.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(string, cache.ResourceEventHandler, func([]interface{}) error) error); ok {
		r1 = rf(namespace, handlerFuncs, processExisting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNamespaceHandler provides a mock function with given fields: handlerFuncs, processExisting
func (_m *NodeWatchFactory) AddNamespaceHandler(handlerFuncs cache.ResourceEventHandler, processExisting func([]interface{}) error) (*factory.Handler, error) {
	ret := _m.Called(handlerFuncs, processExisting)

	if len(ret) == 0 {
		panic("no return value specified for AddNamespaceHandler")
	}

	var r0 *factory.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) (*factory.Handler, error)); ok {
		return rf(handlerFuncs, processExisting)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) *factory.Handler); ok {
		r0 = rf(handlerFuncs, processExisting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*factory.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, func([]interface{}) error) error); ok {
		r1 = rf(handlerFuncs, processExisting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPodHandler provides a mock function with given fields: handlerFuncs, processExisting
func (_m *NodeWatchFactory) AddPodHandler(handlerFuncs cache.ResourceEventHandler, processExisting func([]interface{}) error) (*factory.Handler, error) {
	ret := _m.Called(handlerFuncs, processExisting)

	if len(ret) == 0 {
		panic("no return value specified for AddPodHandler")
	}

	var r0 *factory.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) (*factory.Handler, error)); ok {
		return rf(handlerFuncs, processExisting)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) *factory.Handler); ok {
		r0 = rf(handlerFuncs, processExisting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*factory.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, func([]interface{}) error) error); ok {
		r1 = rf(handlerFuncs, processExisting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddServiceHandler provides a mock function with given fields: handlerFuncs, processExisting
func (_m *NodeWatchFactory) AddServiceHandler(handlerFuncs cache.ResourceEventHandler, processExisting func([]interface{}) error) (*factory.Handler, error) {
	ret := _m.Called(handlerFuncs, processExisting)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceHandler")
	}

	var r0 *factory.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) (*factory.Handler, error)); ok {
		return rf(handlerFuncs, processExisting)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, func([]interface{}) error) *factory.Handler); ok {
		r0 = rf(handlerFuncs, processExisting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*factory.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, func([]interface{}) error) error); ok {
		r1 = rf(handlerFuncs, processExisting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EgressIPInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) EgressIPInformer() egressipv1.EgressIPInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EgressIPInformer")
	}

	var r0 egressipv1.EgressIPInformer
	if rf, ok := ret.Get(0).(func() egressipv1.EgressIPInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(egressipv1.EgressIPInformer)
		}
	}

	return r0
}

// GetAllPods provides a mock function with given fields:
func (_m *NodeWatchFactory) GetAllPods() ([]*corev1.Pod, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPods")
	}

	var r0 []*corev1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*corev1.Pod, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*corev1.Pod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpointSlice provides a mock function with given fields: namespace, name
func (_m *NodeWatchFactory) GetEndpointSlice(namespace string, name string) (*discoveryv1.EndpointSlice, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointSlice")
	}

	var r0 *discoveryv1.EndpointSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*discoveryv1.EndpointSlice, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *discoveryv1.EndpointSlice); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discoveryv1.EndpointSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: name
func (_m *NodeWatchFactory) GetNamespace(name string) (*corev1.Namespace, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *corev1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Namespace, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Namespace); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespaces provides a mock function with given fields:
func (_m *NodeWatchFactory) GetNamespaces() ([]*corev1.Namespace, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaces")
	}

	var r0 []*corev1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*corev1.Namespace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*corev1.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: name
func (_m *NodeWatchFactory) GetNode(name string) (*corev1.Node, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *corev1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Node, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *NodeWatchFactory) GetNodes() ([]*corev1.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodes")
	}

	var r0 []*corev1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*corev1.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*corev1.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPod provides a mock function with given fields: namespace, name
func (_m *NodeWatchFactory) GetPod(namespace string, name string) (*corev1.Pod, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPod")
	}

	var r0 *corev1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*corev1.Pod, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *corev1.Pod); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPods provides a mock function with given fields: namespace
func (_m *NodeWatchFactory) GetPods(namespace string) ([]*corev1.Pod, error) {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetPods")
	}

	var r0 []*corev1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*corev1.Pod, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) []*corev1.Pod); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: namespace, name
func (_m *NodeWatchFactory) GetService(namespace string, name string) (*corev1.Service, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*corev1.Service, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *corev1.Service); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceEndpointSlices provides a mock function with given fields: namespace, svcName, network
func (_m *NodeWatchFactory) GetServiceEndpointSlices(namespace string, svcName string, network string) ([]*discoveryv1.EndpointSlice, error) {
	ret := _m.Called(namespace, svcName, network)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceEndpointSlices")
	}

	var r0 []*discoveryv1.EndpointSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]*discoveryv1.EndpointSlice, error)); ok {
		return rf(namespace, svcName, network)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []*discoveryv1.EndpointSlice); ok {
		r0 = rf(namespace, svcName, network)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discoveryv1.EndpointSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(namespace, svcName, network)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields:
func (_m *NodeWatchFactory) GetServices() ([]*corev1.Service, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []*corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*corev1.Service, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*corev1.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: selector
func (_m *NodeWatchFactory) ListNodes(selector labels.Selector) ([]*corev1.Node, error) {
	ret := _m.Called(selector)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []*corev1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(labels.Selector) ([]*corev1.Node, error)); ok {
		return rf(selector)
	}
	if rf, ok := ret.Get(0).(func(labels.Selector) []*corev1.Node); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(labels.Selector) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalPodInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) LocalPodInformer() cache.SharedIndexInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalPodInformer")
	}

	var r0 cache.SharedIndexInformer
	if rf, ok := ret.Get(0).(func() cache.SharedIndexInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.SharedIndexInformer)
		}
	}

	return r0
}

// NADInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) NADInformer() k8s_cni_cncf_iov1.NetworkAttachmentDefinitionInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NADInformer")
	}

	var r0 k8s_cni_cncf_iov1.NetworkAttachmentDefinitionInformer
	if rf, ok := ret.Get(0).(func() k8s_cni_cncf_iov1.NetworkAttachmentDefinitionInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(k8s_cni_cncf_iov1.NetworkAttachmentDefinitionInformer)
		}
	}

	return r0
}

// NamespaceInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) NamespaceInformer() informerscorev1.NamespaceInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NamespaceInformer")
	}

	var r0 informerscorev1.NamespaceInformer
	if rf, ok := ret.Get(0).(func() informerscorev1.NamespaceInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(informerscorev1.NamespaceInformer)
		}
	}

	return r0
}

// NodeCoreInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) NodeCoreInformer() informerscorev1.NodeInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeCoreInformer")
	}

	var r0 informerscorev1.NodeInformer
	if rf, ok := ret.Get(0).(func() informerscorev1.NodeInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(informerscorev1.NodeInformer)
		}
	}

	return r0
}

// NodeInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) NodeInformer() cache.SharedIndexInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeInformer")
	}

	var r0 cache.SharedIndexInformer
	if rf, ok := ret.Get(0).(func() cache.SharedIndexInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.SharedIndexInformer)
		}
	}

	return r0
}

// PodCoreInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) PodCoreInformer() informerscorev1.PodInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PodCoreInformer")
	}

	var r0 informerscorev1.PodInformer
	if rf, ok := ret.Get(0).(func() informerscorev1.PodInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(informerscorev1.PodInformer)
		}
	}

	return r0
}

// RemoveEndpointSliceHandler provides a mock function with given fields: handler
func (_m *NodeWatchFactory) RemoveEndpointSliceHandler(handler *factory.Handler) {
	_m.Called(handler)
}

// RemoveNamespaceHandler provides a mock function with given fields: handler
func (_m *NodeWatchFactory) RemoveNamespaceHandler(handler *factory.Handler) {
	_m.Called(handler)
}

// RemovePodHandler provides a mock function with given fields: handler
func (_m *NodeWatchFactory) RemovePodHandler(handler *factory.Handler) {
	_m.Called(handler)
}

// RemoveServiceHandler provides a mock function with given fields: handler
func (_m *NodeWatchFactory) RemoveServiceHandler(handler *factory.Handler) {
	_m.Called(handler)
}

// RouteAdvertisementsInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) RouteAdvertisementsInformer() routeadvertisementsv1.RouteAdvertisementsInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RouteAdvertisementsInformer")
	}

	var r0 routeadvertisementsv1.RouteAdvertisementsInformer
	if rf, ok := ret.Get(0).(func() routeadvertisementsv1.RouteAdvertisementsInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routeadvertisementsv1.RouteAdvertisementsInformer)
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *NodeWatchFactory) Shutdown() {
	_m.Called()
}

// Start provides a mock function with given fields:
func (_m *NodeWatchFactory) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserDefinedNetworkInformer provides a mock function with given fields:
func (_m *NodeWatchFactory) UserDefinedNetworkInformer() userdefinednetworkv1.UserDefinedNetworkInformer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserDefinedNetworkInformer")
	}

	var r0 userdefinednetworkv1.UserDefinedNetworkInformer
	if rf, ok := ret.Get(0).(func() userdefinednetworkv1.UserDefinedNetworkInformer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(userdefinednetworkv1.UserDefinedNetworkInformer)
		}
	}

	return r0
}

// NewNodeWatchFactory creates a new instance of NodeWatchFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeWatchFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeWatchFactory {
	mock := &NodeWatchFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
