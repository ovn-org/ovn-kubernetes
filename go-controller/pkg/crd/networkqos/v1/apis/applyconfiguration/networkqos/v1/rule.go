/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RuleApplyConfiguration represents a declarative configuration of the Rule type for use
// with apply.
type RuleApplyConfiguration struct {
	Priority   *int                          `json:"priority,omitempty"`
	DSCP       *int                          `json:"dscp,omitempty"`
	Classifier *ClassifierApplyConfiguration `json:"classifier,omitempty"`
	Bandwidth  *BandwidthApplyConfiguration  `json:"bandwidth,omitempty"`
}

// RuleApplyConfiguration constructs a declarative configuration of the Rule type for use with
// apply.
func Rule() *RuleApplyConfiguration {
	return &RuleApplyConfiguration{}
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *RuleApplyConfiguration) WithPriority(value int) *RuleApplyConfiguration {
	b.Priority = &value
	return b
}

// WithDSCP sets the DSCP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DSCP field is set to the value of the last call.
func (b *RuleApplyConfiguration) WithDSCP(value int) *RuleApplyConfiguration {
	b.DSCP = &value
	return b
}

// WithClassifier sets the Classifier field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Classifier field is set to the value of the last call.
func (b *RuleApplyConfiguration) WithClassifier(value *ClassifierApplyConfiguration) *RuleApplyConfiguration {
	b.Classifier = value
	return b
}

// WithBandwidth sets the Bandwidth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Bandwidth field is set to the value of the last call.
func (b *RuleApplyConfiguration) WithBandwidth(value *BandwidthApplyConfiguration) *RuleApplyConfiguration {
	b.Bandwidth = value
	return b
}
