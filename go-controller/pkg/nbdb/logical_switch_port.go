// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package nbdb

import "github.com/ovn-org/libovsdb/model"

const LogicalSwitchPortTable = "Logical_Switch_Port"

// LogicalSwitchPort defines an object in Logical_Switch_Port table
type LogicalSwitchPort struct {
	UUID             string            `ovsdb:"_uuid"`
	Addresses        []string          `ovsdb:"addresses"`
	Dhcpv4Options    *string           `ovsdb:"dhcpv4_options"`
	Dhcpv6Options    *string           `ovsdb:"dhcpv6_options"`
	DynamicAddresses *string           `ovsdb:"dynamic_addresses"`
	Enabled          *bool             `ovsdb:"enabled"`
	ExternalIDs      map[string]string `ovsdb:"external_ids"`
	HaChassisGroup   *string           `ovsdb:"ha_chassis_group"`
	MirrorRules      []string          `ovsdb:"mirror_rules"`
	Name             string            `ovsdb:"name"`
	Options          map[string]string `ovsdb:"options"`
	ParentName       *string           `ovsdb:"parent_name"`
	PortSecurity     []string          `ovsdb:"port_security"`
	Tag              *int              `ovsdb:"tag"`
	TagRequest       *int              `ovsdb:"tag_request"`
	Type             string            `ovsdb:"type"`
	Up               *bool             `ovsdb:"up"`
}

type LSPOption func(lsp *LogicalSwitchPort)

func WithLogicalSwitchPortEnabled(enabled bool) LSPOption {
	return func(lsp *LogicalSwitchPort) {
		lsp.Enabled = &enabled
	}
}

func ApplyLogicalSwitchPortOpts(lsp *LogicalSwitchPort, lspOpts ...LSPOption) {
	for _, f := range lspOpts {
		f(lsp)
	}
}

func (a *LogicalSwitchPort) GetUUID() string {
	return a.UUID
}

func (a *LogicalSwitchPort) GetAddresses() []string {
	return a.Addresses
}

func copyLogicalSwitchPortAddresses(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalLogicalSwitchPortAddresses(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *LogicalSwitchPort) GetDhcpv4Options() *string {
	return a.Dhcpv4Options
}

func copyLogicalSwitchPortDhcpv4Options(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortDhcpv4Options(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetDhcpv6Options() *string {
	return a.Dhcpv6Options
}

func copyLogicalSwitchPortDhcpv6Options(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortDhcpv6Options(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetDynamicAddresses() *string {
	return a.DynamicAddresses
}

func copyLogicalSwitchPortDynamicAddresses(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortDynamicAddresses(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetEnabled() *bool {
	return a.Enabled
}

func copyLogicalSwitchPortEnabled(a *bool) *bool {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortEnabled(a, b *bool) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyLogicalSwitchPortExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalLogicalSwitchPortExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *LogicalSwitchPort) GetHaChassisGroup() *string {
	return a.HaChassisGroup
}

func copyLogicalSwitchPortHaChassisGroup(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortHaChassisGroup(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetMirrorRules() []string {
	return a.MirrorRules
}

func copyLogicalSwitchPortMirrorRules(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalLogicalSwitchPortMirrorRules(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *LogicalSwitchPort) GetName() string {
	return a.Name
}

func (a *LogicalSwitchPort) GetOptions() map[string]string {
	return a.Options
}

func copyLogicalSwitchPortOptions(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalLogicalSwitchPortOptions(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *LogicalSwitchPort) GetParentName() *string {
	return a.ParentName
}

func copyLogicalSwitchPortParentName(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortParentName(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetPortSecurity() []string {
	return a.PortSecurity
}

func copyLogicalSwitchPortPortSecurity(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalLogicalSwitchPortPortSecurity(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *LogicalSwitchPort) GetTag() *int {
	return a.Tag
}

func copyLogicalSwitchPortTag(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortTag(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetTagRequest() *int {
	return a.TagRequest
}

func copyLogicalSwitchPortTagRequest(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortTagRequest(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) GetType() string {
	return a.Type
}

func (a *LogicalSwitchPort) GetUp() *bool {
	return a.Up
}

func copyLogicalSwitchPortUp(a *bool) *bool {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalLogicalSwitchPortUp(a, b *bool) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *LogicalSwitchPort) DeepCopyInto(b *LogicalSwitchPort) {
	*b = *a
	b.Addresses = copyLogicalSwitchPortAddresses(a.Addresses)
	b.Dhcpv4Options = copyLogicalSwitchPortDhcpv4Options(a.Dhcpv4Options)
	b.Dhcpv6Options = copyLogicalSwitchPortDhcpv6Options(a.Dhcpv6Options)
	b.DynamicAddresses = copyLogicalSwitchPortDynamicAddresses(a.DynamicAddresses)
	b.Enabled = copyLogicalSwitchPortEnabled(a.Enabled)
	b.ExternalIDs = copyLogicalSwitchPortExternalIDs(a.ExternalIDs)
	b.HaChassisGroup = copyLogicalSwitchPortHaChassisGroup(a.HaChassisGroup)
	b.MirrorRules = copyLogicalSwitchPortMirrorRules(a.MirrorRules)
	b.Options = copyLogicalSwitchPortOptions(a.Options)
	b.ParentName = copyLogicalSwitchPortParentName(a.ParentName)
	b.PortSecurity = copyLogicalSwitchPortPortSecurity(a.PortSecurity)
	b.Tag = copyLogicalSwitchPortTag(a.Tag)
	b.TagRequest = copyLogicalSwitchPortTagRequest(a.TagRequest)
	b.Up = copyLogicalSwitchPortUp(a.Up)
}

func (a *LogicalSwitchPort) DeepCopy() *LogicalSwitchPort {
	b := new(LogicalSwitchPort)
	a.DeepCopyInto(b)
	return b
}

func (a *LogicalSwitchPort) CloneModelInto(b model.Model) {
	c := b.(*LogicalSwitchPort)
	a.DeepCopyInto(c)
}

func (a *LogicalSwitchPort) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *LogicalSwitchPort) Equals(b *LogicalSwitchPort) bool {
	return a.UUID == b.UUID &&
		equalLogicalSwitchPortAddresses(a.Addresses, b.Addresses) &&
		equalLogicalSwitchPortDhcpv4Options(a.Dhcpv4Options, b.Dhcpv4Options) &&
		equalLogicalSwitchPortDhcpv6Options(a.Dhcpv6Options, b.Dhcpv6Options) &&
		equalLogicalSwitchPortDynamicAddresses(a.DynamicAddresses, b.DynamicAddresses) &&
		equalLogicalSwitchPortEnabled(a.Enabled, b.Enabled) &&
		equalLogicalSwitchPortExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalLogicalSwitchPortHaChassisGroup(a.HaChassisGroup, b.HaChassisGroup) &&
		equalLogicalSwitchPortMirrorRules(a.MirrorRules, b.MirrorRules) &&
		a.Name == b.Name &&
		equalLogicalSwitchPortOptions(a.Options, b.Options) &&
		equalLogicalSwitchPortParentName(a.ParentName, b.ParentName) &&
		equalLogicalSwitchPortPortSecurity(a.PortSecurity, b.PortSecurity) &&
		equalLogicalSwitchPortTag(a.Tag, b.Tag) &&
		equalLogicalSwitchPortTagRequest(a.TagRequest, b.TagRequest) &&
		a.Type == b.Type &&
		equalLogicalSwitchPortUp(a.Up, b.Up)
}

func (a *LogicalSwitchPort) EqualsModel(b model.Model) bool {
	c := b.(*LogicalSwitchPort)
	return a.Equals(c)
}

var _ model.CloneableModel = &LogicalSwitchPort{}
var _ model.ComparableModel = &LogicalSwitchPort{}
