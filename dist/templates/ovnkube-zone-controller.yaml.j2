---
# ovnkube-zone-controller
# daemonset version 3
# starts zone controller daemons - ovn dbs, ovn-northd and ovnkube-controller containers
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovnkube-zone-controller
  # namespace set up by install
  namespace: ovn-kubernetes
  annotations:
    kubernetes.io/description: |
      This DaemonSet launches the ovn-kubernetes networking components for worker nodes.
spec:
  selector:
    matchLabels:
      app: ovnkube-zone-controller
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ovnkube-zone-controller
        name: ovnkube-zone-controller
        component: network
        type: infra
        kubernetes.io/os: "linux"
        ovn-db-pod: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      # Requires fairly broad permissions - ability to read all services and network functions as well
      # as all pods.
      serviceAccountName: ovnkube-node
      hostNetwork: true
      dnsPolicy: Default
      {{ "hostPID: true" if ovn_unprivileged_mode=="no" }}

      # required to be scheduled on a linux node with node-role.kubernetes.io/zone-controller label
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/zone-controller
                    operator: In
                    values:
                      - ""
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - "linux"

      containers:

      # nb-ovsdb - v3
      - name: nb-ovsdb
        image: "{{ ovn_image | default('docker.io/ovnkube/ovn-daemonset:latest') }}"
        imagePullPolicy: "{{ ovn_image_pull_policy | default('IfNotPresent') }}"

        command: ["/root/ovnkube.sh", "nb-ovsdb"]

        securityContext:
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN"]

        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # ovn db is stored in the pod in /etc/openvswitch
        # (or in /etc/ovn if OVN from new repository is used)
        # and on the host in /var/lib/openvswitch/
        - mountPath: /etc/openvswitch/
          name: host-etc-ovs
        - mountPath: /etc/ovn/
          name: host-var-lib-ovs
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs

        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_NB
          value: "{{ ovn_loglevel_nb }}"
        - name: OVN_NORTHD_BACKOFF_INTERVAL
          value: "{{ ovn_northd_backoff_interval }}"
        - name: ENABLE_IPSEC
          value: "{{ enable_ipsec }}"
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName

        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovnnb-db"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      # end of container

      # sb-ovsdb - v3
      - name: sb-ovsdb
        image: "{{ ovn_image | default('docker.io/ovnkube/ovn-daemonset:latest') }}"
        imagePullPolicy: "{{ ovn_image_pull_policy | default('IfNotPresent') }}"

        command: ["/root/ovnkube.sh", "sb-ovsdb"]

        securityContext:
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN"]

        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # ovn db is stored in the pod in /etc/openvswitch
        # (or in /etc/ovn if OVN from new repository is used)
        # and on the host in /var/lib/openvswitch/
        - mountPath: /etc/openvswitch/
          name: host-etc-ovs
        - mountPath: /etc/ovn/
          name: host-var-lib-ovs
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs

        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_SB
          value: "{{ ovn_loglevel_sb }}"
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: OVN_SSL_ENABLE
          value: "{{ ovn_ssl_en }}"
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovnsb-db"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60

      # end of container

      # ovn-northd - v3
      - name: ovn-northd
        image: "{{ ovn_image | default('docker.io/ovnkube/ovn-daemonset:latest') }}"
        imagePullPolicy: "{{ ovn_image_pull_policy | default('IfNotPresent') }}"

        command: ["/root/ovnkube.sh", "run-ovn-northd"]

        securityContext:
          runAsUser: 0
          capabilities:
            add: ["SYS_NICE"]

        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Run directories where we need to be able to access sockets
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true

        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_NORTHD
          value: "{{ ovn_loglevel_northd }}"
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OVN_SSL_ENABLE
          value: "{{ ovn_ssl_en }}"
        - name: OVN_NORTH
          value: "local"
        - name: OVN_SOUTH
          value: "local"
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovn-northd"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      # end of container

      # zone controller
      - name: ovnkube-controller
        image: "{{ ovn_image | default('docker.io/ovnkube/ovn-daemonset:latest') }}"
        imagePullPolicy: "{{ ovn_image_pull_policy | default('IfNotPresent') }}"

        command: ["/root/ovnkube.sh", "ovnkube-controller"]

        securityContext:
          runAsUser: 0

        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Run directories where we need to be able to access sockets
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/ovn-kubernetes/
          name: host-var-log-ovnkube
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true

        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVNKUBE_LOGLEVEL
          value: "{{ ovnkube_local_loglevel }}"
        - name: OVNKUBE_LOGFILE_MAXSIZE
          value: "{{ ovnkube_logfile_maxsize }}"
        - name: OVNKUBE_LOGFILE_MAXBACKUPS
          value: "{{ ovnkube_logfile_maxbackups }}"
        - name: OVNKUBE_LOGFILE_MAXAGE
          value: "{{ ovnkube_logfile_maxage }}"
        - name: OVNKUBE_LIBOVSDB_CLIENT_LOGFILE
          value: "{{ ovnkube_libovsdb_client_logfile }}"
        - name: OVNKUBE_CONFIG_DURATION_ENABLE
          value: "{{ ovnkube_config_duration_enable }}"
        - name: OVN_NET_CIDR
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: net_cidr
        - name: OVN_SVC_CIDR
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: svc_cidr
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OVN_HYBRID_OVERLAY_ENABLE
          value: "{{ ovn_hybrid_overlay_enable }}"
        - name: OVN_ADMIN_NETWORK_POLICY_ENABLE
          value: "{{ ovn_admin_network_policy_enable }}"
        - name: OVN_EGRESSIP_ENABLE
          value: "{{ ovn_egress_ip_enable }}"
        - name: OVN_EGRESSIP_HEALTHCHECK_PORT
          value: "{{ ovn_egress_ip_healthcheck_port }}"
        - name: OVN_EGRESSSERVICE_ENABLE
          value: "{{ ovn_egress_service_enable }}"
        - name: OVN_EGRESSFIREWALL_ENABLE
          value: "{{ ovn_egress_firewall_enable }}"
        - name: OVN_EGRESSQOS_ENABLE
          value: "{{ ovn_egress_qos_enable }}"
        - name: OVN_MULTI_NETWORK_ENABLE
          value: "{{ ovn_multi_network_enable }}"
        - name: OVN_NETWORK_SEGMENTATION_ENABLE
          value: "{{ ovn_network_segmentation_enable }}"
        - name: OVN_ROUTE_ADVERTISEMENTS_ENABLE
          value: "{{ ovn_route_advertisements_enable }}"
        - name: OVN_HYBRID_OVERLAY_NET_CIDR
          value: "{{ ovn_hybrid_overlay_net_cidr }}"
        - name: OVN_DISABLE_SNAT_MULTIPLE_GWS
          value: "{{ ovn_disable_snat_multiple_gws }}"
        - name: OVN_ENCAP_PORT
          value: "{{ ovn_encap_port }}"
        - name: OVN_EMPTY_LB_EVENTS
          value: "{{ ovn_empty_lb_events }}"
        - name: OVN_V4_JOIN_SUBNET
          value: "{{ ovn_v4_join_subnet }}"
        - name: OVN_V6_JOIN_SUBNET
          value: "{{ ovn_v6_join_subnet }}"
        - name: OVN_V4_MASQUERADE_SUBNET
          value: "{{ ovn_v4_masquerade_subnet }}"
        - name: OVN_V6_MASQUERADE_SUBNET
          value: "{{ ovn_v6_masquerade_subnet }}"
        - name: OVN_SSL_ENABLE
          value: "{{ ovn_ssl_en }}"
        - name: OVN_GATEWAY_MODE
          value: "{{ ovn_gateway_mode }}"
        - name: OVN_MULTICAST_ENABLE
          value: "{{ ovn_multicast_enable }}"
        - name: OVN_ACL_LOGGING_RATE_LIMIT
          value: "{{ ovn_acl_logging_rate_limit }}"
        - name: OVN_ENABLE_INTERCONNECT
          value: "{{ ovn_enable_interconnect }}"
        - name: OVN_ENABLE_MULTI_EXTERNAL_GATEWAY
          value: "{{ ovn_enable_multi_external_gateway }}"
        - name: OVN_ENABLE_SVC_TEMPLATE_SUPPORT
          value: "{{ ovn_enable_svc_template_support }}"
        - name: OVN_HOST_NETWORK_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: host_network_namespace
        - name: OVN_NORTH
          value: "local"
        - name: OVN_SOUTH
          value: "local"
        - name: OVN_ENABLE_DNSNAMERESOLVER
          value: "{{ ovn_enable_dnsnameresolver }}"
        - name: OVN_OBSERV_ENABLE
          value: "{{ ovn_observ_enable }}"
      # end of container

      volumes:
      # Common volumes
      - name: host-var-run-dbus
        hostPath:
          path: /var/run/dbus
      - name: host-var-log-ovnkube
        hostPath:
          path: /var/log/ovn-kubernetes
      - name: host-var-run-ovn-kubernetes
        hostPath:
          path: /var/run/ovn-kubernetes
      - name: host-opt-cni-bin
        hostPath:
          path: /opt/cni/bin
      - name: host-etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
      - name: host-slash
        hostPath:
          path: /
      - name: host-netns
        hostPath:
          path: /var/run/netns
      - name: host-var-log-ovs
        hostPath:
          path: /var/log/openvswitch
      - name: host-run-ovs
        hostPath:
          path: /run/openvswitch
      - name: host-var-run-ovs
        hostPath:
          path: /var/run/openvswitch
      - name: host-ovn-cert
        hostPath:
          path: /etc/ovn
          type: DirectoryOrCreate
      - name: host-var-lib-ovs
        hostPath:
          path: /var/lib/openvswitch
      - name: host-etc-ovs
        hostPath:
          path: /etc/openvswitch

      tolerations:
      - operator: "Exists"
